// Mocks generated by Mockito 5.4.5 from annotations
// in clean_ease/test/features/booking/presentation/view_model/booking_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:clean_ease/core/error/failure.dart' as _i6;
import 'package:clean_ease/features/booking/domain/entity/booking_entity.dart'
    as _i7;
import 'package:clean_ease/features/booking/domain/repository/booking_repository.dart'
    as _i2;
import 'package:clean_ease/features/booking/domain/use_case/booking_use_case.dart'
    as _i4;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBookingRepository_0 extends _i1.SmartFake
    implements _i2.BookingRepository {
  _FakeBookingRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BookingUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookingUseCase extends _i1.Mock implements _i4.BookingUseCase {
  MockBookingUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookingRepository get bookingRepository => (super.noSuchMethod(
        Invocation.getter(#bookingRepository),
        returnValue: _FakeBookingRepository_0(
          this,
          Invocation.getter(#bookingRepository),
        ),
      ) as _i2.BookingRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.BookingEntity>> createBooking({
    required String? serviceId,
    required String? date,
    required String? time,
    required String? pickupLocation,
    required String? dropOffLocation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBooking,
          [],
          {
            #serviceId: serviceId,
            #date: date,
            #time: time,
            #pickupLocation: pickupLocation,
            #dropOffLocation: dropOffLocation,
          },
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.BookingEntity>>.value(
                _FakeEither_1<_i6.Failure, _i7.BookingEntity>(
          this,
          Invocation.method(
            #createBooking,
            [],
            {
              #serviceId: serviceId,
              #date: date,
              #time: time,
              #pickupLocation: pickupLocation,
              #dropOffLocation: dropOffLocation,
            },
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.BookingEntity>>);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookingEntity>>>
      fetchUserBookings() => (super.noSuchMethod(
            Invocation.method(
              #fetchUserBookings,
              [],
            ),
            returnValue: _i5
                .Future<_i3.Either<_i6.Failure, List<_i7.BookingEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.BookingEntity>>(
              this,
              Invocation.method(
                #fetchUserBookings,
                [],
              ),
            )),
          ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.BookingEntity>>>);
}
